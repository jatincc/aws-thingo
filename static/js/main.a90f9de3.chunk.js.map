{"version":3,"sources":["Quiz.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","backgroundColor","palette","background","paper","CheckboxList","darkMode","onDarkMode","classes","React","useState","checked","setChecked","Dataset","map","_","a","questions","setQuestions","Math","floor","random","length","randomIndex","setRandomIndex","wrong","setWrong","completedQuestions","setCompletedQuestions","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","handleAccurateAnswer","newCompletedQuestions","newQuestions","handleNext","List","className","component","subheader","style","display","alignItems","Switch","onChange","name","inputProps","ListSubheader","disableSticky","id","ListItem","role","undefined","ListItemText","parse","question","answers","count","labelId","dense","button","onClick","secondaryTypographyProps","variant","Checkbox","edge","tabIndex","disableRipple","size","color","correct","fontSize","body","textAlign","paddingTop","Button","ans","forEach","item","JSON","stringify","sort","App","setDarkMode","useMemo","createMuiTheme","type","ThemeProvider","CssBaseline","ReactDOM","render","document","querySelector"],"mappings":"q1hXAYMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACPC,MAAO,OAEPC,gBAAiBH,EAAMI,QAAQC,WAAWC,WAyB5B,SAASC,EAAT,GAA+C,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,WACzCC,EAAUZ,IAD4C,EAE9Ba,IAAMC,SAAS,IAFe,mBAErDC,EAFqD,KAE5CC,EAF4C,OAG1BH,IAAMC,SAASG,EAAQC,KAAI,SAACC,EAAEC,GAAH,OAASA,MAHV,mBAGrDC,EAHqD,KAG1CC,EAH0C,OAItBT,IAAMC,SAASS,KAAKC,MAAMD,KAAKE,SAAWJ,EAAUK,SAJ9B,mBAIrDC,EAJqD,KAIxCC,EAJwC,OAKlCf,IAAMC,UAAS,GALmB,mBAKrDe,EALqD,KAK9CC,EAL8C,OAMRjB,IAAMC,SAAS,IANP,mBAMrDiB,EANqD,KAMjCC,EANiC,KAStDC,EAAe,SAACC,GAAD,OAAW,WAC/B,IAAMC,EAAepB,EAAQqB,QAAQF,GAC/BG,EAAU,YAAOtB,IAED,IAAlBoB,EACJE,EAAWC,KAAKJ,GAEhBG,EAAWE,OAAOJ,EAAc,GAGhCnB,EAAWqB,KAoBNG,EAAuB,WAC5B,IAAIC,EAAwBV,EAC5BU,EAAsBH,KAAKX,GAC3BK,EAAsBS,GAEtB,IAAIC,EAAerB,EACnBqB,EAAaH,OAAOZ,EAAa,GACjCL,EAAaoB,IAGRC,EAAa,WAClBf,EAAeL,KAAKC,MAAMD,KAAKE,SAAWJ,EAAUK,SACpDV,EAAW,IACXc,GAAS,IAGV,OACC,qCACC,eAACc,EAAA,EAAD,CAAMC,UAAWjC,EAAQT,KACxB2C,UAAU,MACVC,UACC,sBAAKC,MAAO,CACRC,QAAS,OACTC,WAAW,UAFf,UAKA,cAACC,EAAA,EAAD,CACCpC,QAASL,EACT0C,SAAUzC,EACV0C,KAAK,WACLC,WAAY,CAAE,aAAc,wBAE7B,cAACC,EAAA,EAAD,CAAeC,eAAa,EAACV,UAAU,KAAKW,GAAG,wBAA/C,mBACK1B,EAAmBL,OADxB,0BACgDL,EAAUK,OAD1D,4BACoFK,EAAmBL,OAAOT,EAAQS,OADtH,UAdF,UAmBC,cAACgC,EAAA,EAAD,CAAmBC,UAAMC,EAAzB,SAEC,cAACC,EAAA,EAAD,CAAcJ,GAAI,WAAlB,SAEGK,YAAM,sCAAD,OAAuC7C,EAAQI,EAAUM,IAAcoC,SAAvE,qBAJM,IASd9C,EAAQI,EAAUM,IAAcqC,QAAQ9C,KAAI,SAACgB,EAAO+B,GACpD,IAAMC,EAAO,8BAA0BD,GAEvC,OACA,cAACP,EAAA,EAAD,CAAsBC,UAAMC,EAAWO,OAAK,EAACC,QAAM,EAACC,QAASpC,EAAagC,GAA1E,SAGG,cAACJ,EAAA,EAAD,CAAcM,OAAK,EAACG,yBAA0B,CAC7CC,QAAS,WACPd,GAAIS,EAFP,SAIA,sBAAKlB,MAAO,CACXC,QAAS,OACTC,WAAW,UAFZ,UAIC,cAACsB,EAAA,EAAD,CACCC,KAAK,QACL1D,SAAqC,IAA5BA,EAAQqB,QAAQ6B,GACzBS,UAAW,EACXC,eAAa,EACbC,KAAK,QACL5B,MAAO,CACN6B,MAAOhD,IAAUK,EAAM4C,QAAU,QAAQ,QAE1CxB,WAAY,CAAE,kBAAmBY,KAElC,qBAAKlB,MAAO,CACX+B,SAAU,OACVF,MAAOhD,IAAUK,EAAM4C,QAAU,QAAQ,QAF1C,SAIE5C,EAAM8C,aA1BGf,SAkCjB,qBAAKjB,MAAO,CAAEiC,UAAU,SAAUC,WAAW,QAA7C,SAEGrD,EAMA,cAACsD,EAAA,EAAD,CAAQd,QAAS1B,EAAY4B,QAAQ,YAAYM,MAAM,UAAvD,kBAJA,cAACM,EAAA,EAAD,CAAQd,QAzGQ,WACpB,IAAMe,EAAM,GACZnE,EAAQI,EAAUM,IAAcqC,QAAQqB,SAAQ,SAACC,EAAMrB,GAClDqB,EAAKR,SACRM,EAAI9C,KAAK2B,MAGMsB,KAAKC,UAAUJ,EAAIK,UAAYF,KAAKC,UAAUzE,EAAQ0E,SAKtEjD,IACAG,KAHAb,GAAS,IA+FyByC,QAAQ,YAAYM,MAAM,UAAzD,yBCjKN,SAASa,IAAO,IAAD,EAEkB7E,IAAMC,UAAS,GAFjC,mBAEPJ,EAFO,KAEGiF,EAFH,KAIRzF,EAAQW,IAAM+E,SACpB,kBACCC,YAAe,CACfvF,QAAS,CACRwF,KAAMpF,EAAW,OAAS,aAG5B,CAACA,IAOD,OACA,eAACqF,EAAA,EAAD,CAAe7F,MAAOA,EAAtB,UACC,cAAC8F,EAAA,EAAD,IACA,cAAC,EAAD,CAAMtF,SAAUA,EAAUC,WAPJ,WACtBgF,GAAajF,SAWfuF,IAASC,OAAO,cAACR,EAAD,IAASS,SAASC,cAAc,Y","file":"static/js/main.a90f9de3.chunk.js","sourcesContent":["import Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'html-react-parser';\nimport React from 'react';\nimport Dataset from './dataset.json';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Switch from '@material-ui/core/Switch';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n\twidth: '100%',\n\t// maxWidth: 360,\n\tbackgroundColor: theme.palette.background.paper,\n  },\n}));\n// const existing = [];\n// for (let a = 0; a < Dataset.length; a++) {\n// \tconst elementA = Dataset[a];\n// \tfor (let b = 0; b < Dataset.length; b++) {\n// \t\tconst elementB = Dataset[b];\n// \t\tif (existing.indexOf(a) !== -1) {\n// \t\t\tcontinue;\n// \t\t}\n// \t\tif (a !== b && elementA.question === elementB.question) {\n// \t\t\texisting.push(b);\n// \t\t\tconsole.log(elementA.id, '=', elementB.id);\n// \t\t\tfor (let ans = 0; ans < elementB.answers.length; ans++) {\n// \t\t\t\tconst elementAns = elementB.answers[ans];\n// \t\t\t\tif (elementAns.correct !== elementA.answers[ans].correct) {\n// \t\t\t\t\tconsole.log(elementAns.body, '!',elementA.answers[ans].body)\n// \t\t\t\t}\n// \t\t\t}\n// \t\t}\n// \t}\n// }\n// console.log(existing.length)\n\nexport default function CheckboxList({darkMode, onDarkMode}) {\n\tconst classes = useStyles();\n\tconst [checked, setChecked] = React.useState([]);\n\tconst [questions, setQuestions] = React.useState(Dataset.map((_,a) => a));\n\tconst [randomIndex, setRandomIndex] = React.useState(Math.floor(Math.random() * questions.length));\n\tconst [wrong, setWrong] = React.useState(false);\n\tconst [completedQuestions, setCompletedQuestions] = React.useState([]);\n\t// console.log( questions, randomIndex);\n\n\tconst handleToggle = (value) => () => {\n\t\tconst currentIndex = checked.indexOf(value);\n\t\tconst newChecked = [...checked];\n\n\t\tif (currentIndex === -1) {\n\t\tnewChecked.push(value);\n\t\t} else {\n\t\tnewChecked.splice(currentIndex, 1);\n\t\t}\n\n\t\tsetChecked(newChecked);\n\t};\n\n\tconst handleSubmit = () => {\n\t\tconst ans = [];\n\t\tDataset[questions[randomIndex]].answers.forEach((item, count) => {\n\t\t\tif (item.correct) {\n\t\t\t\tans.push(count);\n\t\t\t}\n\t\t});\n\t\tconst isEqual = (JSON.stringify(ans.sort()) === JSON.stringify(checked.sort()));\n\n\t\tif (!isEqual) {\n\t\t\tsetWrong(true);\n\t\t} else {\n\t\t\thandleAccurateAnswer();\n\t\t\thandleNext();\n\t\t}\n\t}\n\n\tconst handleAccurateAnswer = () => {\n\t\tlet newCompletedQuestions = completedQuestions;\n\t\tnewCompletedQuestions.push(randomIndex);\n\t\tsetCompletedQuestions(newCompletedQuestions);\n\n\t\tlet newQuestions = questions;\n\t\tnewQuestions.splice(randomIndex, 1);\n\t\tsetQuestions(newQuestions);\n\t}\n\n\tconst handleNext = () => {\n\t\tsetRandomIndex(Math.floor(Math.random() * questions.length));\n\t\tsetChecked([]);\n\t\tsetWrong(false);\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<List className={classes.root}\n\t\t\t\tcomponent=\"nav\"\n\t\t\t\tsubheader={\n\t\t\t\t\t<div style={{\n\t\t\t\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\t\t\t\talignItems:'center'\n\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\n\t\t\t\t\t<Switch\n\t\t\t\t\t\tchecked={darkMode}\n\t\t\t\t\t\tonChange={onDarkMode}\n\t\t\t\t\t\tname=\"checkedA\"\n\t\t\t\t\t\tinputProps={{ 'aria-label': 'secondary checkbox' }}\n\t\t\t\t\t/>\n\t\t\t\t\t<ListSubheader disableSticky component=\"li\" id=\"nested-list-subheader\">\n\t\t\t\t\t\t{`${completedQuestions.length} completed and ${questions.length} Questions left. ${completedQuestions.length/Dataset.length}%`}\n\t\t\t\t\t</ListSubheader>\n\t\t\t\t\t</div>\n\t\t\t}>\n\t\t\t\t<ListItem key={45} role={undefined}  >\n\n\t\t\t\t\t<ListItemText id={'question'} >\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tparse(`<Typography style=\"fontSize:12px;\">${Dataset[questions[randomIndex]].question}</Typography>`)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t</ListItemText>\n\n\t\t\t\t</ListItem>\n\t\t\t\t{Dataset[questions[randomIndex]].answers.map((value, count) => {\n\t\t\t\t\tconst labelId = `checkbox-list-label-${count}`;\n\n\t\t\t\t\treturn (\n\t\t\t\t\t<ListItem key={count} role={undefined} dense button onClick={handleToggle(count)}>\n\t\t\t\t\t\t{/* <ListItemIcon>\n\t\t\t\t\t\t</ListItemIcon> */}\n\t\t\t\t\t\t\t\t<ListItemText dense secondaryTypographyProps={{\n\t\t\t\t\t\t\t\t\tvariant: 'caption',\n\t\t\t\t\t\t\t\t}} id={labelId}  >\n\n\t\t\t\t\t\t\t\t<div style={{\n\t\t\t\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\t\t\t\talignItems:'center'\n\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\tedge=\"start\"\n\t\t\t\t\t\t\t\t\t\tchecked={checked.indexOf(count) !== -1}\n\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\n\t\t\t\t\t\t\t\t\t\tdisableRipple\n\t\t\t\t\t\t\t\t\t\tsize='small'\n\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\tcolor: wrong && (value.correct ? 'green':'red')\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tinputProps={{ 'aria-labelledby': labelId }}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<div style={{\n\t\t\t\t\t\t\t\t\t\tfontSize: '12px',\n\t\t\t\t\t\t\t\t\t\tcolor: wrong && (value.correct ? 'green':'red')\n\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t{value.body}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</ListItemText>\n\t\t\t\t\t</ListItem>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</List>\n\t\t\t<div style={{ textAlign:'center', paddingTop:'20px'}}>\n\t\t\t\t{\n\t\t\t\t\t!wrong\n\t\t\t\t\t\t?\n\t\t\t\t\t\t<Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<Button onClick={handleNext} variant=\"contained\" color=\"primary\">\n\t\t\t\t\t\t\tNext\n\t\t\t\t\t\t</Button>\n\t\t\t\t\n\t\t\t\t}\n\t\t\t</div>\n\t\t</>\n\t);\n}","\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Quiz from './Quiz';\n\nfunction App() {\n\n\tconst [darkMode, setDarkMode] = React.useState(true);\n\t\n\tconst theme = React.useMemo(\n\t() =>\n\t\tcreateMuiTheme({\n\t\tpalette: {\n\t\t\ttype: darkMode ? 'dark' : 'light',\n\t\t},\n\t\t}),\n\t[darkMode],\n\t);\n\n\tconst handleDarkMode = () => {\n\t\tsetDarkMode(!darkMode);\n\t}\n\n\treturn (\n\t<ThemeProvider theme={theme}>\n\t\t<CssBaseline/>\n\t\t<Quiz darkMode={darkMode} onDarkMode={handleDarkMode} />\n\t</ThemeProvider>\n\t);\n}\n\nReactDOM.render(<App />, document.querySelector('#root'));\n    "],"sourceRoot":""}